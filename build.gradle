apply plugin: 'java'
apply plugin: 'findbugs'

defaultTasks 'clean', 'check', 'assemble'

sourceCompatibility = 1.7
version = '1.0.0'

buildDir = "out"

configurations {
  proguard
}

ext {
  releaseDir = "release"
}

repositories {
  mavenCentral()
}

dependencies {
  compile 'com.google.guava:guava:16.0'
  compile 'com.google.code.findbugs:annotations:2.0.3'
  compile 'org.slf4j:slf4j-api:1.7.5'
  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'

  testCompile 'commons-io:commons-io:2.4'
  testCompile 'org.easytesting:fest-swing-junit-4.5:1.2.1'
  testCompile 'junit:junit:4.11'

  proguard 'net.sf.proguard:proguard-base:4.11'
}

clean.doLast {
  ant.delete(dir: releaseDir)
}

task release(dependsOn: 'assemble') << {
  out.println "Releasing $version"
}

gradle.taskGraph.whenReady {taskGraph ->
  if (!taskGraph.hasTask(release)) {
    version += "-SNAPSHOT"
  }
}

jar {
  destinationDir = file(releaseDir)
  manifest {
    attributes 'Manifest-Version': version, 'Main-Class': 'com.selesse.tailerswift.Main'
  }

  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task getVersion << {
  out.println version
}

task proguard(type: JavaExec, dependsOn: jar) {
    def outFile = jar.destinationDir.getPath() + '/' + jar.baseName + '-' + jar.version + '-small' + '.' + jar.extension
    inputs.file jar.archivePath
    outputs.file outFile

    classpath = configurations.proguard
    main = 'proguard.ProGuard'
    args "-injars ${jar.archivePath}"
    args "-outjars ${outFile}"
    args "-libraryjars '${System.properties['java.home']}" + File.separator + "lib" + File.separator + "rt.jar'"
    args '-dontobfuscate'
    args '-dontoptimize'
    args '-keep public class org.slf4j.** { *; }'
    args '-keep public class ch.qos.** { *; }'
    args '-keep public class com.selesse.tailerswift.Main { public static void main(java.lang.String[]); }'
    args '-keepclassmembers enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'
    args '-dontwarn com.google.common.**'
    args '-dontnote com.google.common.**'
    args '-dontwarn ch.qos.**'
    args '-dontnote ch.qos.**'
}

tasks.getByPath(':release').dependsOn(proguard, "check")
